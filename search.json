[{"title":"聊聊HTTP的MIME","path":"/archive/聊聊HTTP的MIME/","content":"MIME是什么?MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型; 在最早的HTTP协议中,没有附加的数据类型信息. 所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。 每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。 常见的MIME类型(通用型)： 超文本标记语言文本 .html text&#x2F;html xml文档 .xml text&#x2F;xml XHTML文档 .xhtml application&#x2F;xhtml+xml 普通文本 .txt text&#x2F;plain RTF文本 .rtf application&#x2F;rtf PDF文档 .pdf application&#x2F;pdf Microsoft Word文件 .word application&#x2F;msword PNG图像 .png image&#x2F;png GIF图形 .gif image&#x2F;gif JPEG图形 .jpeg,.jpg image&#x2F;jpeg au声音文件 .au audio&#x2F;basic MIDI音乐文件 mid,.midi audio&#x2F;midi,audio&#x2F;x-midi RealAudio音乐文件 .ra, .ram audio&#x2F;x-pn-realaudio MPEG文件 .mpg,.mpeg video&#x2F;mpeg AVI文件 .avi video&#x2F;x-msvideo GZIP文件 .gz application&#x2F;x-gzip TAR文件 .tar application&#x2F;x-tar 任意的二进制数据 application&#x2F;octet-stream 用于WAP服务器的MIME类型有： MRP文件（国内普遍的手机）.mrp application&#x2F;octet-stream IPA文件(IPHONE) .ipa application&#x2F;iphone-package-archive Debian软件包格式 .deb application&#x2F;x-debian-package-archive APK文件(安卓系统) .apk application&#x2F;vnd.android.package-archive CAB文件(Windows Mobile) .cab application&#x2F;vnd.cab-com-archive XAP文件(Windows Phone 7) .xap application&#x2F;x-silverlight-app SIS文件(symbian平台&#x2F;S60V1) .sis application&#x2F;vnd.symbian.install-archive * SISX文件(symbian平台&#x2F;S60V3&#x2F;V5) .sisx application&#x2F;vnd.symbian.epoc&#x2F;x-sisx-app JAR、JAD文件(JAVA平台手机通用格式) .jar .jad 服务器在发送真正的数据之前，就要先发送标志数据的MIME类型的信息，这个信息使用Content-type关键字进行定义. 1Content-type: text/html Content-type就是我们经常在 http请求\b头里 response header看到的那个. 里面包含的就是MIME信息.","tags":["HTTP"],"categories":["网络"]},{"title":"什么是浏览器的重绘与回流","path":"/archive/什么是浏览器的重绘与回流/","content":"重绘与回流的定义 重绘：当前元素的样式(背景颜色、字体颜色等)发生改变的时候，我们只需要把改变的元素重新的渲染一下即可，重绘对浏览器的性能影响较小，所以 一般不考虑。 发生重绘的情形：改变容器的外观风格等，比如background：black等。改变外观，不改变布局，不影响其他的dom。 回流：是指浏览器为了重新渲染部分或者全部的文档而重新计算文档中元素的位置和几何构造的过程。因为回流可能导致整个dom树的重新构造，所以是性能的一大杀手.一个元素的回流导致了其所有子元素以及DOM中紧随其后的祖先元素的随后的回流. 浏览器渲染过程渲染：就是把浏览器把HTML代码以css定义的规则显示在浏览器窗口的过程 浏览器解析HTML的基本过程： 用户输入网址，浏览器向服务器发出请求，服务器返回html文件 浏览器载入html代码，发现标签内有一个标签引用外部css文件 浏览器又发出css文件的请求，服务器返回这个css文件 浏览器继续载入html中的部分的代码，并且css文件已经拿到手了，可以渲染页面 浏览器在代码中发现一个标签引用关了一张图片，向服务器发出请求。此时浏览器不会等到图片下载完，而是继续渲染后面的代码 服务器返回图片文件，由于图片占用了一定面积，影响了后面段落的排布，因此浏览器需要回过头来渲染这部分代码 浏览器发现了一个包含一行javascript代码的script标签，赶快运行它 javascript脚本执行了这条语句，命令浏览器隐藏代码中某个,杯具了，突然就少了一个元素，浏览器不得不重新渲染这部分代码 终于等到的到来，浏览器泪流满面 等等，还没完，用户点了一个界面中的“换肤”按钮，javascript让浏览器换了一个标签中的css的路径 浏览器召集了在座的各位：”大伙需要收拾下行李，咱得重新来过”，浏览器向服务器请求了新的css文件，重新渲染页面当页面的布局发生变化时，浏览器会回过头来重新渲染，这就是页面变慢的原因。 触发回流的操作 调整窗口大小（Resizing the window） 改变字体（Changing the font） 增加或者移除样式表（Adding or removing a stylesheet） 内容变化，比如用户在input框中输入文字（Content changes, such as a user typing text in an input box） 激活 CSS 伪类，比如 :hover (IE 中为兄弟结点伪类的激活)（Activation of CSS pseudo classes such as :hover (in IE the activation of the pseudo class of a sibling) 操作 class 属性（Manipulating the class attribute） 脚本操作 DOM（A script manipulating the DOM） 计算 offsetWidth 和 offsetHeight 属性（Calculating offsetWidth and offsetHeight） 设置 style 属性的值 （Setting a property of the style attribute） fixed定位的元素,在拖动滚动条的时候会一直回流 资料出处: http://blog.sina.com.cn/s/blog_8dace7290102wezv.html http://www.cnblogs.com/jyybeam/p/5776667.html","tags":["HTML"],"categories":["HTML"]},{"title":"算法复杂度分析","path":"/archive/算法复杂度分析/","content":"一切都是为了统计代码执行的效率 事后统计法通过统计、监控，就能得到算法执行的时间和占用的内存大小 大 O 复杂度表示法随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长 时间复杂度的好坏排序 O(1)（常数阶）&lt; O(logn)（对数阶）&lt; O(n)（线性阶）&lt; O(nlogn)（线性对数阶）&lt; O(n^2)（平方阶）&lt; O(n^3)（立方阶）&lt; O(2^n)（指数阶）&lt; O(n!)（阶乘阶） 常数阶O(1)123int i = 8;int j = 6;int sum = i + j; 线性阶O(n)12345for(i=1; i&lt;=n; ++i)&#123; j = i; j++;&#125; 对数阶 O(logn)1234i=1;while (i &lt;= n) &#123; i = i * 2;&#125; 线性对数阶O(nlogN)12345678for(m=1; m&lt;n; m++)&#123; i = 1; while(i&lt;n) &#123; i = i * 2; &#125;&#125; O(m+n)、O(m*n)1234567891011121314151617int cal(int m, int n) &#123; int sum_1 = 0; int i = 1; for (; i &lt; m; ++i) &#123; sum_1 = sum_1 + i; &#125; int sum_2 = 0; int j = 1; for (; j &lt; n; ++j) &#123; sum_2 = sum_2 + j; &#125; return sum_1 + sum_2;&#125; 平方阶O(n²)12345678for(x=1; i&lt;=n; x++)&#123; for(i=1; i&lt;=n; i++) &#123; j = i; j++; &#125;&#125; 最好最坏复杂度 最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度 最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。 空间复杂度渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系 空间复杂度 O(1)12345int i = 1;int j = 2;++i;j++;int m = i + j; 空间复杂度 O(n)123456int[] m = new int[n]for(i=1; i&lt;=n; ++i)&#123; j = i; j++;&#125;","tags":["Algorithms"]},{"title":"Hello World","path":"/archive/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]